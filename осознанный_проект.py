# -*- coding: utf-8 -*-
"""Осознанный проект

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M-Z0q7FUsC6QHv0obKFg0giRuh6XuE5e

#import packages
"""

import pandas as pd
import numpy as np
from IPython.display import display

import matplotlib.pyplot as plt
import seaborn as sns

import sklearn.preprocessing as prepro
from sklearn.decomposition import PCA

from sklearn.ensemble import ExtraTreesClassifier

"""#data import"""

data = pd.read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/glass/glass.data", header= None)
data.head(3)

names=["id","RI","Na","Mg","Al","si","K","Ca","Ba","Fe","Class"]
data.columns = names
data= data.drop(columns=["id"])
data.head(3)

data["Class"].replace(
                      {1:"building_float",
                       2:"building_non_float",
                       3:"vehicle_float",
                       4:"vehicle_non_float",
                       5:"containers",
                       6:"tableware",
                       7:"headlamps",
                       }, inplace=True)

data.head(100)

for col in data.columns:
  fr= np.random.randint(5,10)/100
  data.loc[data.sample(frac=fr).index, col]=np.nan
data.head(3)

"""#Data Vizualization"""

data.info()

data.describe()

display(data["Class"].describe())
print("____________________________________")
display(data["Class"].value_counts())

for col in data.columns:
  missing_values_counts= data[col].isna().sum()
  porcentage =100*data[col].isna().sum()/len(data[col])

  print("column",col,"contains",missing_values_counts,
        "NULL values (",porcentage,"%).")

"""#HISTOGRAMS"""

col='Al'

plt.hist(data[col])
plt.show()

fig, ax=plt.subplots(figsize=(10,4))


ax.hist(data[col],bins=20)
ax.set_xlabel("Column "+str(col),fontsize=14)
ax.set_title("Histograms",fontsize=14)


plt.show()

data[col].plot(kind="hist")

plt.show()

ax = data[col].plot(kind="hist")
ax.set_xlabel(col)
plt.show()

ax = data[['Al','Mg']].plot(kind='hist')
ax.set_xlabel(col)
plt.show()

sns.histplot(data=data,x=col,kde=True,stat='probability')
plt.show()

"""#Bar Plot"""

col="Class"
df1= data[col].value_counts()
df1

df1.index.values

df1.values

fig, ax=plt.subplots(figsize=(12,6))

ax.bar(data[col].value_counts().index.values,
       data[col].value_counts().values)





plt.show()

data[col].value_counts().plot(kind='bar')

sns.countplot(data=data,x='Class')
plt.show()

"""
#Ящик с усами(Диаграма размаха)


"""

col='Al'
fig, ax =plt.subplots()
ax.boxplot(data[col])
plt.show()

col='Al'
fig, ax =plt.subplots()
ax.boxplot(data[col][~np.isnan(data[col])],showmeans=True)
plt.show()

data[col].plot(kind='box')
plt.show()

sns.boxplot(data=data, x= col)
plt.show()

data.plot(kind="box")
plt.show()

data.columns

data.columns.values

data.columns.values !='si'

data.columns.values[data.columns.values !='si']

data[data.columns.values[data.columns.values !='si']].plot(kind="box")
plt.show()

sns.boxplot(data=data[data.columns.values[data.columns.values !='si']])
plt.show()

"""#Scaller"""

scaler1 =prepro.MinMaxScaler()
dataScaled1=scaler1.fit_transform(data[data.columns.values[data.columns.values !='Class']])
dataScaled1=pd.DataFrame(dataScaled1,columns=data.columns.values[data.columns.values !='Class'])

dataScaled1.plot(kind='box')
plt.show()

sns.boxplot(data=dataScaled1)
plt.show()

scaler2 =prepro.StandardScaler()
dataScaled2=scaler2.fit_transform(data[data.columns.values[data.columns.values !='Class']])
dataScaled2=pd.DataFrame(dataScaled2,columns=data.columns.values[data.columns.values !='Class'])

dataScaled2.plot(kind='box')
plt.show()

sns.boxplot(data=dataScaled2)
plt.show()

"""#Pait Plot"""

col1='Mg'
col2="Fe"

fig, ax =plt.subplots()
ax.scatter(data[col1],data[col2])
ax.set_xlabel(col1)
ax.set_ylabel(col2)
plt.show()

df1=data['Class'].value_counts()
df1.index.values

fig, ax =plt.subplots()

for glassType in data['Class'].value_counts().index.values:
  ax.scatter(data[col1] [data["Class"]==glassType],
             data[col2] [data["Class"]==glassType],
             label=glassType)
ax.set_xlabel(col1)
ax.set_ylabel(col2)

ax.legend()
plt.show()

sns.pairplot(data=data,hue="Class")
plt.show()

"""#Задание
С помощю виджета ,сделать отрисовку всех переменых на выбор 1)boxplot
2)пары

#Nan
"""

data.mean()

data_fillna_mean = data.fillna(data.mean()).copy()

data_fillna_mean.info()

data['Class'].value_counts()

data['Class'].value_counts().index.values[0]

data['Class'].mode()

data_fillna_mean["Class"].fillna(data["Class"].value_counts().index.values[0],
                                 inplace=True)

"""Задание: сделать заполнение средним по катекгориям

#PCA
"""

pca= PCA()
pca.fit(data_fillna_mean[data_fillna_mean.columns.values[data_fillna_mean.columns.values != 'Class']])

pca.explained_variance_ratio_*100

fig, ax =plt.subplots()
ax.plot(np.arange(1,10),pca.explained_variance_ratio_*100)
plt.show()

rez= pca.transform(data_fillna_mean[data_fillna_mean.columns.values[data_fillna_mean.columns.values != 'Class']])

dataPca=pd.DataFrame(rez)
dataPca.head(3)

pcaNames=[]
for i in range(9):
  pcaNames.append('pc'+str(i+1))

dataPca.columns=pcaNames
dataPca.head()

dataPca['Class']=data_fillna_mean['Class'].copy()

fig, ax=plt.subplots(figsize=(8,8))

ax.scatter(dataPca['pc1'], dataPca['pc2'])
ax.set_xlabel("pc1")
ax.set_title("pc2")
plt.show()

col1 = 'pc1'
col2 = 'pc2'
fig, ax =plt.subplots()

for glassType in dataPca['Class'].value_counts().index.values:
  ax.scatter(dataPca[col1] [dataPca["Class"]==glassType],
  dataPca[col2] [dataPca["Class"]==glassType],
  label=glassType)
ax.set_xlabel(col1)
ax.set_ylabel(col2)

ax.legend()

col1 = 'pc1'
col2 = 'pc2'
fig=plt.figure(figsize=(10,10))
ax=plt.axes(projection='3d')

for glassType in dataPca['Class'].value_counts().index.values:
  ax.scatter( dataPca['pc1'] [dataPca["Class"]==glassType],
              dataPca['pc3'] [dataPca["Class"]==glassType],
              dataPca['pc3'] [dataPca["Class"]==glassType],
  label=glassType)

ax.set_xlabel('pc1',fontsize= 16)
ax.set_xlabel('pc2',fontsize= 16)
ax.set_xlabel('pc3',fontsize= 16)
ax.legend()

plt.show()

"""#Корреляция

"""

corr=data_fillna_mean.corr()
corr

plt.figure(figsize=(12,10))
ax= sns.heatmap(corr,annot=True,vmax=1,vmin=-1,cmap='RdYlGn')
ax.set_title("Корреляция вещественных переменых",fontsize=18)

plt.show()

"""Сильная корреляия (-1 , -0,75) и (0,75 , 1)

Средняя корреляция(-0.75 , -0.45)и(0.45 , 0.75)

Слабая корреляия (-0.45 , -0.25) и (0.25 , 0.45)
"""

corr[corr>0.54]

plt.figure(figsize=(12,10))

ax= sns.heatmap(corr[(corr>=0.74)|(corr<=-0.74) ],
                annot=True,vmax=1,vmin=-1,cmap='RdYlGn')
ax.set_title("Сильные корреляции вещестенных переменых",fontsize=18)

plt.show()

"""# Feature importance"""

forest= ExtraTreesClassifier(n_estimators=100)
#forest.fit(x,y)

forest.fit(
    data_fillna_mean[
    data_fillna_mean.columns.values[
          data_fillna_mean.columns.values != 'Class']
          ],
        data_fillna_mean["Class"]
        )

importances= forest.feature_importances_
importances

np.sort(importances)[::-1]

indices=np.argsort(importances)[::-1]
indices

print("Feature importance;")
for f in range (9):
  print("%d.feature %s (%f)" %(f+1,data_fillna_mean.columns.values[indices[f]],
                               importances[indices[f]]))

fig, ax = plt.subplots(figsize=(10,6))

ax.set_title("Feature impirtance")
ax.bar(data_fillna_mean.columns.values[indices],
importances[indices])
plt.show()

std=np.std([tree.feature_importances_ for tree in forest.estimators_],
axis=0)

fig, ax = plt.subplots(figsize=(10,6))

ax.set_title("Feature impirtance")
ax.bar(data_fillna_mean.columns.values[indices],
importances[indices],
color='r', yerr=std[indices],align="center")
plt.show()