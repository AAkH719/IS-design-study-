# -*- coding: utf-8 -*-
"""ПИС ПР.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JnjhGuAsxdn9Bs6L0quQIen8BiXqo-fe

# Раздел 1 (Формы)

# Новый раздел

Ахмедеева Алина Хасеновна, КИ19-20б, 20/02/2021
"""

#@title Форма 1
#@markdown ---
name= "\u0410\u043B\u0438\u043D\u0430 \u0410\u0445\u043C\u0435\u0434\u0435\u0435\u0432\u0430" #@param {type:"string"}
group = "\u041A\u041819-20\u0411" #@param ["КИ19-20Б", "КИ19-21Б", "КИ19-22Б", "КИ19-23Б", "КИ19-24Б"]
data= "2021-02-20" #@param {type:"date"}
#@markdown ---

#@markdown Вывести дополнительную информацию.
chek = True #@param {type:"boolean"}
ege = 19 #@param {type:"integer"}
year_st =  5 #@param {type:"slider", min:"1", max:"6", step:"1"}
sr_ball =  4.8 #@param {type:"slider", min:"2", max:"5", step:"0.1"}

if name=="":
  print("Введите Имя")
else:
  print("ФИО: ", name)
  print("Группа: ", group)
  print("Дата:", data)
  if chek == True:
    print("Возраст:", ege)
    print("Время учебы:", year_st)
    print("Средний балл:", sr_ball)

"""# Раздел 2(Таблицы)"""

import pandas as pd
data1 = pd.read_csv("/content/sample_data/california_housing_test.csv")
print(data1)

# Commented out IPython magic to ensure Python compatibility.
# %unload_ext google.colab.data_table
data1

data2 = pd.read_csv("/content/sample_data/mnist_test.csv", header= None )
data2

"""# Задача 1"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
#@title Форма 1
#@markdown ---
name= "\u0410\u043B\u0438\u043D\u0430" #@param {type:"string"}
group = "\u041A\u041819-20\u0411" #@param ["КИ19-20Б", "КИ19-21Б", "КИ19-22Б", "КИ19-23Б", "КИ19-24Б"]
data= "2021-02-20" #@param {type:"date"}
#@markdown ---
#@markdown Вывести дополнительную информацию.
data_v = "california_housing_test" #@param ["california_housing_test", "mnist_test"]
#@markdown Расширенное представление данных.
vid = False #@param {type:"boolean"}

if name==" ":
  print("Введите Имя")
else:
  print("ФИО: ", name)
  print("Группа: ", group)
  print("Дата:", data)

  if data_v == "california_housing_test":
    v_data=pd.read_csv("/content/sample_data/california_housing_test.csv")
  elif data_v == "mnist_test":
    v_data = pd.read_csv("/content/sample_data/mnist_test.csv", header= None )
    
# %load_ext google.colab.data_table     
if vid == True:
  display(v_data)
elif vid == False:
#   %unload_ext google.colab.data_table
  display(v_data)

"""# Задание 2"""

import ipywidgets as widgets

knopka=widgets.Button(description="Вывод информации датафрейма")
output= widgets.Output()

data_v = "california_housing_test" #@param ["california_housing_test", "mnist_test"]
if data_v == "california_housing_test":
  v_data=pd.read_csv("/content/sample_data/california_housing_test.csv")
elif data_v == "mnist_test":
  v_data = pd.read_csv("/content/sample_data/mnist_test.csv", header= None )

info = False #@param {type:"boolean"}

def on_my_knopka_click(b):
  with output:
    if info == True:
      output.clear_output()
      output(v_data.info())   
    elif info == False:
      output.clear_output()
      output(v_data.describe())

knopka.on_click(on_my_knopka_click)
display(knopka, output)

"""# Раздел 3 (Виджеты)"""

import ipywidgets as wd
sl1 = wd.IntSlider()
sl1

from IPython.display import display as dp
cat = wd.Button(description = 'тык')
output = wd.Output()
dp(cat,output)
def catput(b):
  with output:
    output.clear_output()
    for j in range(2):
      print("ОК")
      for i in range(2):
        print("НЕ ОК")
cat.on_click(catput)

from IPython.display import display as dp
dp(sl1)

name = wd.Text(value='The greatest coder in the world')
dp(name)

import time

pb1 = wd.IntProgress(0,1,100,description = 'Booty...',bar_style = 'danger')

dp(pb1)
for i in range(100):
  pb1.value = i+1
  time.sleep(0.10)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib -l
# %matplotlib inline

x = np.linspace(0, 2 * np.pi, 100)

def my_sin(x, amp, w, phi):
  return (amp*np.sin(w*(x - phi)))
def draw_sin(w, amp, phi):
  y = my_sin(x, amp, w, phi)
  fig, ax = plt.subplots()
  ax.grid(True)
  ax.plot(x, y, color='red')
  print(w, amp, phi)
wd.interact(draw_sin, w=(0,10,1), amp = (0,4,.1), phi=(0,2*np.pi + 0.01, 0.01))

"""# Данные"""

import pandas as pd

data = pd.read_csv("/content/sample_data/california_housing_test.csv")

data.info()

data.describe()

"""# Задание 3"""

import pandas as pd
import numpy as np
from IPython.display import display

import matplotlib.pyplot as plt
import seaborn as sns

import sklearn.preprocessing as prepro
from sklearn.decomposition import PCA
from sklearn.ensemble import ExtraTreesClassifier

data =  pd.read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/glass/glass.data",header = None)
data.head(3)

names =["Id","RI","Na","Mg","Al","Si","K","Ca","Ba","Fe","Class"]
data.columns=names
data = data.drop(columns=['Id'])
data.head(3)

data['Class'].replace(
                      {
                       1:"building_windows_float",
                       2:"building_windows_non_float",
                       3:"vehicle_windows_float",
                       4:"vehicle_windows_non_float",
                       5:"containers",
                       6:"tableware",
                       7:"headlamps",
                      },inplace=True)
data.head(3)

for col in data.columns:
  fr = np.random.randint(5,10)/100
  data.loc[data.sample(frac=fr).index, col]=np.nan
data.head(10)

#@title Задание 1
#@markdown -----
data_x = "Class" #@param ["RI", "Na",	"Mg", "Al",	"Si", "K", "Ca", "Ba", "Fe","Class"]
col1="RI"
col2="Na"
col3="Mg"
col4="Al"
col5="Si"
col6="K"
col7="Ca"
col8="Ba"
col9="Fe"
col10="Class"
if data_x == "RI":
  fig , ax = plt.subplots(figsize=(6,4))
  ax.hist(data[col1])
  ax.set_xlabel("Column"+str(col1),fontsize=14)
  ax.set_title("Histogram",color='red',fontsize=18)
  plt.show()
elif data_x == "Na":
  fig , ax = plt.subplots(figsize=(6,4))
  ax.hist(data[col2])
  ax.set_xlabel("Column"+str(col2),fontsize=14)
  ax.set_title("Histogram",color='red',fontsize=18)
  plt.show()
elif data_x == "Mg":
  fig , ax = plt.subplots(figsize=(6,4))
  ax.hist(data[col3])
  ax.set_xlabel("Column"+str(col3),fontsize=14)
  ax.set_title("Histogram",color='red',fontsize=18)
  plt.show()
elif data_x == "Al":
  fig , ax = plt.subplots(figsize=(6,4))
  ax.hist(data[col4])
  ax.set_xlabel("Column"+str(col4),fontsize=14)
  ax.set_title("Histogram",color='red',fontsize=18)
  plt.show()
elif data_x == "Si":
  fig , ax = plt.subplots(figsize=(6,4))
  ax.hist(data[col5])
  ax.set_xlabel("Column"+str(col5),fontsize=14)
  ax.set_title("Histogram",color='red',fontsize=18)
  plt.show()
elif data_x == "K":
  fig , ax = plt.subplots(figsize=(6,4))
  ax.hist(data[col6])
  ax.set_xlabel("Column"+str(col6),fontsize=14)
  ax.set_title("Histogram",color='red',fontsize=18)
  plt.show()
elif data_x == "Ca":
  fig , ax = plt.subplots(figsize=(6,4))
  ax.hist(data[col7])
  ax.set_xlabel("Column"+str(col7),fontsize=14)
  ax.set_title("Histogram",color='red',fontsize=18)
  plt.show()
elif data_x == "Ba":
  fig , ax = plt.subplots(figsize=(6,4))
  ax.hist(data[col8])
  ax.set_xlabel("Column"+str(col8),fontsize=14)
  ax.set_title("Histogram",color='red',fontsize=18)
  plt.show()
elif data_x == "Fe":
  fig , ax = plt.subplots(figsize=(6,4))
  ax.hist(data[col9])
  ax.set_xlabel("Column"+str(col9),fontsize=14)
  ax.set_title("Histogram",color='red',fontsize=18)
  plt.show()
elif data_x == "Class":
  fig,ax =plt.subplots(figsize=(12,6))
  ax.bar(data[col10].value_counts().index.values,data[col10].value_counts().values)
  ax.set_xlabel(None,fontsize=16)
  ax.set_title('Barplot для '+str(col10),fontsize=16)
  ax.tick_params(axis='x',which='major',labelsize=14,rotation=35)
  plt.show()

#@title Задание 2
#@markdown ---
data_y = "Mg" #@param ["RI", "Na",	"Mg", "Al",	"Si", "K", "Ca", "Ba", "Fe"]
col1="RI"
col2="Na"
col3="Mg"
col4="Al"
col5="Si"
col6="K"
col7="Ca"
col8="Ba"
col9="Fe"
if data_y == "RI":
  fig, ax=plt.subplots()
  ax.boxplot(data[col1][~np.isnan(data[col1])],showmeans=True)
  ax.set_xlabel("Column"+str(col1),fontsize=14)
  ax.set_title("Ящик с усами",color='red',fontsize=18)
  plt.show()
elif data_y == "Na":
  fig, ax=plt.subplots()
  ax.boxplot(data[col2][~np.isnan(data[col2])],showmeans=True)
  ax.set_xlabel("Column"+str(col2),fontsize=14)
  ax.set_title("Ящик с усами",color='red',fontsize=18)
  plt.show()
elif data_y == "Mg":
  fig, ax=plt.subplots()
  ax.boxplot(data[col3][~np.isnan(data[col3])],showmeans=True)
  ax.set_xlabel("Column"+str(col3),fontsize=14)
  ax.set_title("Ящик с усами",color='red',fontsize=18)
  plt.show()
elif data_y == "Al":
  fig, ax=plt.subplots()
  ax.boxplot(data[col4][~np.isnan(data[col4])],showmeans=True)
  ax.set_xlabel("Column"+str(col4),fontsize=14)
  ax.set_title("Ящик с усами",color='red',fontsize=18)
  plt.show()
elif data_y == "Si":
  fig, ax=plt.subplots()
  ax.boxplot(data[col5][~np.isnan(data[col5])],showmeans=True)
  ax.set_xlabel("Column"+str(col5),fontsize=14)
  ax.set_title("Ящик с усами",color='red',fontsize=18)
  plt.show()
elif data_y == "K":
  fig, ax=plt.subplots()
  ax.boxplot(data[col6][~np.isnan(data[col6])],showmeans=True)
  ax.set_xlabel("Column"+str(col6),fontsize=14)
  ax.set_title("Ящик с усами",color='red',fontsize=18)
  plt.show()
elif data_y == "Ca":
  fig, ax=plt.subplots()
  ax.boxplot(data[col7][~np.isnan(data[col7])],showmeans=True)
  ax.set_xlabel("Column"+str(col7),fontsize=14)
  ax.set_title("Ящик с усами",color='red',fontsize=18)
  plt.show()
elif data_y == "Ba":
  fig, ax=plt.subplots()
  ax.boxplot(data[col8][~np.isnan(data[col8])],showmeans=True)
  ax.set_xlabel("Column"+str(col8),fontsize=14)
  ax.set_title("Ящик с усами",color='red',fontsize=18)
  plt.show()
elif data_y == "Fe":
  fig, ax=plt.subplots()
  ax.boxplot(data[col9][~np.isnan(data[col9])],showmeans=True)
  ax.set_xlabel("Column"+str(col9),fontsize=14)
  ax.set_title("Ящик с усами",color='red',fontsize=18)
  plt.show()

#@title Задание 3
#@markdown ---
data_z1 = "Mg" #@param ["RI", "Na",	"Mg", "Al",	"Si", "K", "Ca", "Ba", "Fe"]
data_z2 = "Ca" #@param ["RI", "Na",	"Mg", "Al",	"Si", "K", "Ca", "Ba", "Fe"]
col1="RI"
col2="Na"
col3="Mg"
col4="Al"
col5="Si"
col6="K"
col7="Ca"
col8="Ba"
col9="Fe"

fig, ax = plt.subplots(figsize=(10,8))

for glassType in data['Class'].value_counts().index.values: 
  ax.scatter(data[data_z1][data['Class']==glassType],data[data_z2] [data['Class']==glassType],label=glassType)

ax.set_xlabel(data_z1)
ax.set_ylabel(data_z2)
ax.legend()
plt.show

"""# Раздел 5 """

data.info()

data_fillna_mean = data.fillna(data.mean()).copy()

data_fillna_mean.describe()

data['Class'].value_counts()

data['Class'].value_counts().index.values[0]

data['Class'].mode()

data_fillna_mean['Class'].fillna(data['Class'].value_counts().index.values[0],
                                 inplace=True)

"""# PCA"""

from sklearn.decomposition import PCA

pca = PCA()
pca.fit(data_fillna_mean[data_fillna_mean.columns.values[data_fillna_mean.columns.values != 'Class']])

pca.explained_variance_ratio_*100

fig, ax = plt.subplots()
ax.plot(np.arange(1,10), pca.explained_variance_ratio_*100)
plt.show()

rez = pca.transform(data_fillna_mean[data_fillna_mean.columns.values[data_fillna_mean.columns.values != 'Class']])

datapca = pd.DataFrame(rez)
datapca.head(3)

pcanames=[]
for i in range(9):
  pcanames.append('pc'+str(i+1))

datapca.columns=pcanames
datapca.head()

datapca['Class'] = data_fillna_mean['Class'].copy()

fig, ax = plt.subplots(figsize=(8,8))

ax.scatter(datapca['pc1'], datapca['pc2'])
ax.set_xlabel('pc1')
ax.set_ylabel('pc2')

plt.show()

col1 = 'pc1'
col2 = 'pc2'

fig, ax = plt.subplots(figsize=(8,8))

for glassType in datapca['Class'].value_counts().index.values:
  ax.scatter(datapca[col1][datapca['Class']==glassType],
             datapca[col2][datapca['Class']==glassType],
             label=glassType)

ax.set_xlabel(col1)
ax.set_ylabel(col2)
ax.legend()

plt.show()

fig = plt.figure(figsize=(8,8))
ax = plt.axes(projection='3d')

for glassType in datapca['Class'].value_counts().index.values:
  ax.scatter(datapca['pc1'][datapca['Class']==glassType],
             datapca['pc2'][datapca['Class']==glassType],
             datapca['pc3'][datapca['Class']==glassType],
             label=glassType)

ax.set_xlabel('pc1', fontsize=16)
ax.set_ylabel('pc2', fontsize=16)
ax.set_zlabel('pc3', fontsize=16)
ax.legend()

plt.show()

"""# Раздел 6 (Корреляция)"""

import pandas as pd
import numpy as np
from IPython.display import display

import matplotlib.pyplot as plt
import seaborn as sns

import sklearn.preprocessing as prepro
from sklearn.decomposition import PCA

from sklearn.ensemble import ExtraTreesClassifier

corr=data_fillna_mean.corr()
corr

plt.figure(figsize=(12,10))

ax=sns.heatmap(corr, annot=True, vmax=1, vmin=-1, cmap='RdYlGn')
ax.set_title('Корреляция вещественных переменных',fontsize=18)

plt.show()

corr[corr>0.54]

plt.figure(figsize=(12,10))

ax=sns.heatmap(corr[(corr>=0.75)|(corr<=-0.75)],
               annot=True, vmax=1, vmin=-1, cmap='RdYlGn')
ax.set_title('Корреляция вещественных переменных',fontsize=18)

plt.show()

"""# Importance"""

data_fillna_mean['Class'].fillna(data_fillna_mean['Class'].mode(), inplace=True)

forest=ExtraTreesClassifier(n_estimators=100)

#forest.fit(x,y)

forest.fit(
    data_fillna_mean[
                     data_fillna_mean.columns.values[
                                                     data_fillna_mean.columns.values != 'Class']
                     ],
           data_fillna_mean['Class']
           )

data_fillna_mean['Class'].isna().sum()

importances= forest.feature_importances_
importances

np.sort(importances)[::-1]

indices=np.argsort(importances)[::-1]
indices

print("Featire ranking")

for f in range (9):
  print("%d. feature %s (%f)" % ( f+1, data_fillna_mean.columns.values[indices[f]],
                importances[indices[f]]))

fig, ax = plt.subplots(figsize=(10,6))

ax.set_title("Feature importance")
ax.bar(data_fillna_mean.columns.values[indices],
       importances[indices])
plt.show()

std=np.std([tree.feature_importances_ for tree in forest.estimators_],
           axis=0)

fig, ax = plt.subplots(figsize=(10,6))

ax.set_title("Feature importance")
ax.bar(data_fillna_mean.columns.values[indices],
       importances[indices],
       color='g', yerr=std[indices],align="center")
plt.show()

"""#Домашнее задание 4
Заполнить ещё 1 датафрейм по категориям

Построить графики heatmap для средних и слабых корреляций
"""

#@title Задание 1
#@markdown ---

data_fillna_mean = data.fillna(data.mean()).copy()
data_fillna_mean['RI'].fillna(data['RI'].value_counts().index.values[0],
                                 inplace=True)
data_fillna_mean = data.fillna(data.mean()).copy()
data_fillna_mean['Mg'].fillna(data['Mg'].value_counts().index.values[0],
                                 inplace=True)
data_fillna_mean = data.fillna(data.mean()).copy()
data_fillna_mean['Al'].fillna(data['Al'].value_counts().index.values[0],
                                 inplace=True)
data_fillna_mean = data.fillna(data.mean()).copy()
data_fillna_mean['Ca'].fillna(data['Ca'].value_counts().index.values[0],
                                 inplace=True)
data_fillna_mean = data.fillna(data.mean()).copy()
data_fillna_mean['K'].fillna(data['K'].value_counts().index.values[0],
                                 inplace=True)
data_fillna_mean = data.fillna(data.mean()).copy()
data_fillna_mean['Si'].fillna(data['Si'].value_counts().index.values[0],
                                 inplace=True)
data_fillna_mean = data.fillna(data.mean()).copy()
data_fillna_mean['Na'].fillna(data['Na'].value_counts().index.values[0],
                                 inplace=True)
data_fillna_mean = data.fillna(data.mean()).copy()
data_fillna_mean['Ba'].fillna(data['Ba'].value_counts().index.values[0],
                                 inplace=True)
data_fillna_mean = data.fillna(data.mean()).copy()
data_fillna_mean['Fe'].fillna(data['Fe'].value_counts().index.values[0],
                                 inplace=True)

pca = PCA()
pca.fit(data_fillna_mean[data_fillna_mean.columns.values[data_fillna_mean.columns.values != 'Class']])
pca.explained_variance_ratio_*100

fig, ax = plt.subplots()
ax.plot(np.arange(1,10), pca.explained_variance_ratio_*100)
plt.show()

rez = pca.transform(data_fillna_mean[data_fillna_mean.columns.values[data_fillna_mean.columns.values != 'Class']])
datapca = pd.DataFrame(rez)

pcanames=[]
for i in range(9):
  pcanames.append('pc'+str(i+1))
datapca.columns=pcanames

datapca['Class'] = data_fillna_mean['Class'].copy()

col1 = 'pc1'
col2 = 'pc2'

fig, ax = plt.subplots(figsize=(8,8))

for glassType in datapca['Class'].value_counts().index.values:
  ax.scatter(datapca[col1][datapca['Class']==glassType],
             datapca[col2][datapca['Class']==glassType],
             label=glassType)

ax.set_xlabel(col1)
ax.set_ylabel(col2)
ax.legend()

plt.show()

fig = plt.figure(figsize=(8,8))
ax = plt.axes(projection='3d')

for glassType in datapca['Class'].value_counts().index.values:
  ax.scatter(datapca['pc1'][datapca['Class']==glassType],
             datapca['pc2'][datapca['Class']==glassType],
             datapca['pc3'][datapca['Class']==glassType],
             label=glassType)

ax.set_xlabel('pc1', fontsize=16)
ax.set_ylabel('pc2', fontsize=16)
ax.set_zlabel('pc3', fontsize=16)
ax.legend()

plt.show()

#@title Задание 2
#@markdown ---

plt.figure(figsize=(12,10))

ax=sns.heatmap(corr[(corr>=0.45)&(corr<=0.75)|(corr>=-0.75)&(corr<=-0.45)],
               annot=True, vmax=1, vmin=-1, cmap='RdYlGn')
ax.set_title('Корреляция вещественных переменных',fontsize=18)

plt.show()

plt.figure(figsize=(12,10))

ax=sns.heatmap(corr[(corr>=0.25)&(corr<=0.45)|(corr>=-0.45)&(corr<=-0.25)],
               annot=True, vmax=0.75, vmin=-0.75, cmap='RdYlGn')
ax.set_title('Корреляция вещественных переменных',fontsize=18)

plt.show()